import requests, telebot
from telebot import types
from bs4 import BeautifulSoup

bot = telebot.TeleBot('405295345:AAEiq-A3mEVsE203a0qOM3z2QCpPOlMKbZ0')

@bot.message_handler(commands=['start', 'home'])
def home(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row('üìå –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
    keyboard.row('üîé –ü–æ–∏—Å–∫ –≤ –ö–ª—É–±–µ', 'üîé –ü–æ–∏—Å–∫ –≤ –ü—Ä–∞–≤–∏–ª–∞—Ö')
    keyboard.row('üö´ –°–æ–æ–±—â–∏—Ç—å –æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–∏')
    keyboard.row('üìö –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', '‚úè –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=keyboard)
    
@bot.message_handler(regexp='üìù –ö–ª—É–±')
def club(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –ö–ª—É–±', url='https://yandex.ru/blog/narod-karta')
    keyboard.add(url_button)
    bot.send_message(message.chat.id, '–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ö–ª—É–± –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=keyboard)
    home(message)
    
@bot.message_handler(regexp='üìñ –ü—Ä–∞–≤–∏–ª–∞')
def rules(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–≤–∏–ª–∞', url='https://yandex.ru/support/nmaps/rules_2.html')
    keyboard.add(url_button)
    bot.send_message(message.chat.id, '–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=keyboard)
    home(message)
    
@bot.message_handler(regexp='üîé –ü–æ–∏—Å–∫')
def search(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row('‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è')
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞.', reply_markup=keyboard)
    if message.text == 'üîé –ü–æ–∏—Å–∫ –≤ –ü—Ä–∞–≤–∏–ª–∞—Ö':
        bot.register_next_step_handler(message, search_rules)
    elif message.text == 'üîé –ü–æ–∏—Å–∫ –≤ –ö–ª—É–±–µ':
        bot.register_next_step_handler(message, search_club)
    elif message.text == '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è':
        home(message)
        
def search_club(message):
    if message.text == '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è':
        home(message)
        return
    page = requests.get('https://yandex.ru/blog/narod-karta/search?text=' + message.text.replace(' ', '+'))
    soup = BeautifulSoup(page.text, 'lxml')
    answer = ''
    for item in soup.find_all('a', class_='b-serp-item'):
        pass
        title = item.find('h2').text
        link = 'https://yandex.ru' + item['href']
        answer += '[' + title + '](' + link + ')\n'
        answer += '____________________\n'
    if not answer:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.') 
    else:
        bot.send_message(message.chat.id, answer, parse_mode='markdown', disable_web_page_preview=True) 
    home(message)

def search_rules(message):
    if message.text == '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è':
        home(message)
        return
    page = requests.get('https://yandex.ru/support/search-results/?text=' + message.text.replace(' ', '+') + '&service=nmaps-guide')
    soup = BeautifulSoup(page.text, 'lxml')
    answer = ''
    for item in soup.find_all('a', class_='serp__item'):
        if '...' in item.find_all('div')[0].text:
            title = item.find_all('div')[0].text.split('...')[0]
        else:
            title = item.find_all('div')[0].text.split('‚Äî')[0]
        excerpt = item.find_all('div')[1].text
        link = 'https://yandex.ru' + item['href']
        answer += '[' + title + '](' + link + '): ' + excerpt + '\n'
        answer += '____________________\n'
    if not answer:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.') 
    else:
        bot.send_message(message.chat.id, answer, parse_mode='markdown', disable_web_page_preview=True)
    home(message)
    
@bot.message_handler(content_types=['text'])
def find_roads_hashtags(message):
    print('chat id: ' + str(message.chat.id))
    print('message id: ' + str(message.message_id))
    if message.forward_from:
        print('forwarded from: ' + str(message.forward_from))
        
@bot.callback_query_handler(func=lambda call:True)
def test_callback(call):
    if call.data == 'approved':
        bot.edit_message_text('‚¨á –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚¨á', chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif call.data == 'declined':
        bot.edit_message_text('‚¨á –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚¨á', chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif call.data == 'spam':
        bot.edit_message_text('‚¨á –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚¨á', chat_id=call.message.chat.id, message_id=call.message.message_id)

if __name__ == '__main__':
    bot.polling()